;Thomas Flayols - LAAS CNRS 2023
;This program will send an uart frame and an output enable signal to drive a rs485 
;half duplex tranceiver, It then wait for a response for a setable period of time. 
;
;The first word represent the length of the frame decreased by one (max 0xffffffff)
;The second word represent the lime to wait for a response frame right after TX (max 0xffffffff, 0x00000000 for not listening for response)
;For example:
;to send the frame 0x1234 and not wait for response , send:  
;     0x00000001 0x00000000 0x12 0x34         (len=2 -> 2-1=0x00000001)

;to send the frame 0x123456 and wait the maximum for response, send: 
;     0x00000002 0xffffffff 0x12 0x34 0x56   (len=3 -> 3-1=0x00000002)

.program rs485
.side_set 2 opt
start:
    nop            side 0b00 [3]
    nop            side 0b11 [3]
    pull  block    side 0b11 [3] ; Read the first word, indicating the number of bytes to read +1 ; (oe=1 tx=1 )
    mov x, osr                   ; Store it in "x"
    pull block                   ; Read the second word, indicating the delay to wait for a response frame
    mov isr, osr             [3] ; Store it in ISR temporarly 
    pull block               [3] 
bytesloop:
    set y, 7       side 0b10 [3]
    pull ifempty   side 0b10 [3] ; Start bit   side (oe=1 tx=0)
bitsloop:
    out pins, 1              [3] ; bit 0..7
    jmp y--, bitsloop        [3] ; next bit
    nop            side 0b11 [3] ; Stop bit  side (oe=1 tx=1)
    jmp x--, bytesloop       [3] ; next byte
; RX part ____________________________________________________________________________________________
; For debuging the sampling with an oscilloscope, we can use the TX pin as a sampling indication by adding set side1/0 
    mov x, isr     side 0b01 [3] ; Prepare timeout cpt for start of frame (prevoiously stored in ISR by reading word 2) side (oe=0 tx=1)
waitforstart:
    jmp x--, notimeout 
    jmp timeout 
notimeout:
    jmp PIN waitforstart         ; sample and test start condition
                                 ; We have the start condition!
    set x, 10                [2] ; reset timeout value to detect the end of frame later (end of frame if no start bit for a short period of time)
    set y, 7                 [3] ; prepare the bitloop iterator
rxbitloop:
    nop [2]
    in pins, 1                   ; Shift data bit into ISR
    jmp y-- rxbitloop        [3] ; Loop 8 times, each loop iteration is 8 cycles
    push iffull   side 0b00        ; send the byte to the fifo
    jmp waitforstart             ; 
timeout:
    ; flush in case some data are still in the FIFO (this happen if the received frame size is not a multiple of 4 (32bits word)
    in NULL, 8
    push iffull ;in case 3 bytes were left
    in NULL, 8
    push iffull ;in case 2 bytes were left
    in NULL, 8
    push iffull ;in case 1 byte was left
end:
    jmp end      side 0b00 ; oe=0 tx=0 to see the timeout effect with an oscilloscope
    jmp end      side 0b00
    ; TODO, generate an interupt to signal the end of transmission (and eventually reception). TODO find a way to indicate end is detected to the CPU, pass the size of the buffer to read?
    ; ideas: push a fix amount of data with zeros (max frame length and then push the size)
    ; or maybe go to an interupt and read the DMA pointer if we can be sure the dma can not be late. We could wait for the fifo to be empty in the state machine?
    ; read more about the DMA and how we can control it from the PIO ?
    ; Problem is that the number of IRQ is limited (2 per PIO)
    ; alternative would be to use a different PIO for managing the status of RX, TX; but I would prefer to have a maximum of rs485 in parallel